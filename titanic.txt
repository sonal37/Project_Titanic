train=pd.read_csv("../input/train.csv")
test=pd.read_csv("../input/test.csv")
test.head()
train.head()
train_test_data=[train,test]
sex_mapping={"male":0,"female":1}
for data_set in train_test_data:
    data_set['Sex']=data_set['Sex'].map(sex_mapping)
test.head()
for data_set in train_test_data:
    data_set['Title']=data_set['Name'].str.extract('([A-Za-z]+)\.',expand=False)
train['Title'].value_counts()
title_mapping={"Mr":1,"Mrs":2,"Miss":3,"Master":3,"Dr":3,"Rev":3,"Mlle":3,"Col":3,"Major":3,"Mme":1,"Lady":3,"Jonkheer":3,"Countess":3,"Ms":3,"Don":3,"Capt":3,"Sir":3}
for data_set in train_test_data:
    data_set['Title']=data_set['Title'].map(title_mapping)
train.head()
train.drop('Name',axis=1,inplace=True)
test.drop('Name',axis=1,inplace=True)
train.head()
train["Age"].fillna(train.groupby("Title")["Age"].transform("median"),inplace=True)
test["Age"].fillna(train.groupby("Title")["Age"].transform("median"),inplace=True)
for dataset in train_test_data:
    dataset.loc[dataset["Age"]<=15,"Age"]=0
    dataset.loc[(dataset["Age"]>15)&(dataset["Age"]<=25),"Age"]=1
    dataset.loc[(dataset["Age"]>25)&(dataset["Age"]<=35),"Age"]=2
    dataset.loc[(dataset["Age"]>35)&(dataset["Age"]<=60),"Age"]=3
    dataset.loc[dataset["Age"]>60,"Age"]=5
train.head()
for dataset in train_test_data:
    dataset['Embarked']=dataset['Embarked'].fillna('S')
emb_mapping={"S":0,"C":1,"Q":2}
for data_set in train_test_data:
    data_set['Embarked']=data_set['Embarked'].map(emb_mapping)
train.head()
train["Fare"].fillna(train.groupby("Pclass")["Fare"].transform("median"),inplace=True)
train["Fare"].fillna(train.groupby("Pclass")["Fare"].transform("median"),inplace=True)
train.head()
for dataset in train_test_data:
    dataset.loc[dataset["Fare"]<=25,"Fare"]=0
    dataset.loc[(dataset["Fare"]>25)&(dataset["Fare"]<=50),"Fare"]=1
    dataset.loc[(dataset["Fare"]>50)&(dataset["Fare"]<=100),"Fare"]=2
    dataset.loc[dataset["Fare"]>100,"Fare"]=3
train.head()
for data_set in train_test_data:
    data_set['Cabin']=data_set['Cabin'].str[:1]
Cabin_mapping={"A":0,"B":0.4,"C":0.8,"D":1.2,"E":1.6,"F":2.0,"G":2.4,"T":2.8}
for data_set in train_test_data:
    data_set['Cabin']=data_set['Cabin'].map(Cabin_mapping)
train.head()
train["Cabin"].fillna(train.groupby("Pclass")["Cabin"].transform("median"),inplace=True)
test["Cabin"].fillna(train.groupby("Pclass")["Cabin"].transform("median"),inplace=True)
train.head()
train["Family_size"]=train["SibSp"]+train["Parch"]+1
test["Family_size"]=test["SibSp"]+test["Parch"]+1
train.head()
Family_mapping={1:0,2:0.4,3:0.8,4:1.2,5:1.6,6:2.0,7:2.4,8:2.8,9:3.2,10:3.6,11:4.0}
for data_set in train_test_data:
    data_set['Family_size']=data_set['Family_size'].map(Family_mapping)
train.head()
fd=['Ticket','SibSp','Parch']
train=train.drop(fd,axis=1)
test=test.drop(fd,axis=1)
train.drop('PassengerId',axis=1,inplace=True)
#test.drop('PassengerId',axis=1,inplace=True)
train.head()
train_X=train.drop('Survived',axis=1)
y=train['Survived']
train_X.head()
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
import numpy as np
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
k_fold=KFold(n_splits=10,shuffle=True,random_state=0)
clf=KNeighborsClassifier(n_neighbors=10)
scoring='accuracy'
score=cross_val_score(clf,train_X,y,cv=k_fold,n_jobs=1,scoring=scoring)
print(score)
clf=RandomForestClassifier(n_estimators=13)
scoring='accuracy'
score=cross_val_score(clf,train_X,y,cv=k_fold,n_jobs=1,scoring=scoring)
print(score)
clf=SVC()
clf.fit(train_X,y)
test_data=test.drop("PassengerId",axis=1).copy()
prediction=clf.predict(test_data)
test_data.head()
submission=pd.DataFrame({"PassengerId":test["PassengerID"],"Survived":prediction})
print(submission)
submission.to_csv('submission.csv',index=false)